#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Run the wiremock tool for managing Mock Server
"""

__version__ = "1.0.0"
__author__ = "Jayder Fran√ßa <jayderfranca@gmail.com>"

from sys import argv as _argv
from platform import system
from os import getenv
from docker import from_env
from docker.errors import DockerException, ImageNotFound
from tzlocal import get_localzone

IMAGE_NAME = "wiremock/wiremock:latest"
CONTAINER_NAME = "wiremock"
ENV_REGISTRY_LOCAL = "REGISTRY_LOCAL"
ENV_CUSTOM = "CUSTOM"

def is_linux():
    return system().lower() == "linux"


def get_client():
    try:
        return from_env()
    except DockerException as ex:
        print(f"Docker not available: {str(ex)}")
        return None


def get_image_name():
    registry_local = getenv(ENV_REGISTRY_LOCAL, "")
    image_name = IMAGE_NAME

    if registry_local.strip(" ") != "":
        image_name = registry_local.strip(" ") + '/' + image_name

    return image_name


def get_image():
    client = get_client()
    try:
        image = client.images.get(get_image_name())
    except ImageNotFound:
        image = None
    return image


def pull_image():
    image = get_image()
    if image is None:
        client = get_client()
        print(f"pulling image {get_image_name()} ...")
        image = client.images.pull(get_image_name())
    return image


def get_container_name():
    return CONTAINER_NAME


def run_container(argv):
    container_name = get_container_name()
    image_name = get_image_name()
    client = get_client()
    custom = getenv(ENV_CUSTOM, "")

    file_tz = f"/usr/share/zoneinfo/{str(get_localzone())}"
    volumes = {}

    if is_linux():
        volumes = {
            file_tz: {"bind": "/etc/localtime", "mode": "ro"},
            f"{custom}/opt/wiremock": {"bind": "/home/wiremock", "mode": "rw"},
        }

    ports = {
        "8080/tcp": ("127.0.0.1", 18080)
    }

    container = client.containers.run(
        image=image_name,
        command=argv,
        detach=True,
        hostname=container_name,
        volumes=volumes,
        name=container_name,
        ports=ports
    )

    stream = container.logs(stream=True)

    while True:
        try:
            print(next(stream).decode("utf-8").strip("\r").strip("\n"))
        except StopIteration:
            break
        except KeyboardInterrupt:
            break

    container.remove(force=True)


def main(argv):
    pull_image()
    run_container(argv)


if __name__ == '__main__':
    main(_argv[1:])
