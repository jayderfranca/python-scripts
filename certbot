#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Run the certbot tool for managing Let's Encrypt certificates
"""

__version__ = "1.0.0"
__author__ = "Jayder Fran√ßa <jayderfranca@gmail.com>"

from sys import argv as _argv
from os import getenv
from docker import from_env
from docker.errors import DockerException, ImageNotFound, ContainerError

IMAGE_NAME = "certbot/dns-cloudflare:latest"
CONTAINER_NAME = "certbot"
ENV_REGISTRY_LOCAL = "REGISTRY_LOCAL"
ENV_CUSTOM = "CUSTOM"


def get_client():
    try:
        return from_env()
    except DockerException as ex:
        print(f"Docker not available: {str(ex)}")
        return None


def get_image_name():
    registry_local = getenv(ENV_REGISTRY_LOCAL, "")
    image_name = IMAGE_NAME

    if registry_local.strip(" ") != "":
        image_name = registry_local.strip(" ") + '/' + image_name

    return image_name


def get_image():
    client = get_client()
    try:
        image = client.images.get(get_image_name())
    except ImageNotFound:
        image = None
    return image


def pull_image():
    image = get_image()
    if image is None:
        client = get_client()
        print(f"pulling image {get_image_name()} ...")
        image = client.images.pull(get_image_name())
    return image


def get_container_name():
    return CONTAINER_NAME


def run_container(argv):
    container_name = get_container_name()
    image_name = get_image_name()
    client = get_client()
    custom = getenv(ENV_CUSTOM, "")

    volumes = {
        f"{custom}/etc/letsencrypt": {"bind": "/etc/letsencrypt", "mode": "rw"},
        f"{custom}/var/lib/letsencrypt": {"bind": "/var/lib/letsencrypt", "mode": "rw"},
        f"{custom}/var/log/letsencrypt": {"bind": "/var/log/letsencrypt", "mode": "rw"},
    }

    container = client.containers.run(
        image=image_name,
        command=argv,
        detach=True,
        hostname=container_name,
        volumes=volumes,
        name=container_name
    )

    stream = container.logs(stream=True)

    while True:
        try:
            print(next(stream).decode("utf-8").strip("\r").strip("\n"))
        except StopIteration:
            break

    container.remove(force=True)


def main(argv):
    pull_image()
    run_container(argv)


if __name__ == '__main__':
    main(_argv[1:])
