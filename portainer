#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Manages the status of the portainer on the local machine
"""

__version__ = "1.0.0"
__author__ = "Jayder Fran√ßa <jayderfranca@gmail.com>"

from platform import system
from os import getenv
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from textwrap import dedent
from docker import from_env
from docker.errors import DockerException, ImageNotFound, NotFound
from docker.types import Mount


# constantes globais
START_ACTION = "start"
STOP_ACTION = "stop"
STATUS_ACTION = "status"
IMAGE_NAME = "portainer/portainer-ce:alpine"
CONTAINER_NAME = "portainer"
VOLUME_NAME = "portainer_vol"
ENV_REGISTRY_LOCAL = "REGISTRY_LOCAL"


def is_linux():
    return system().lower() == "linux"


def parse_arguments():
    version_text = dedent("%(prog)s " + __version__ + "\n" + "Author: " + __author__)

    parser = ArgumentParser(description=dedent(__doc__), formatter_class=RawDescriptionHelpFormatter, add_help=False)

    actions = parser.add_argument_group()
    actions.add_argument("action", default=STATUS_ACTION, choices=[START_ACTION, STOP_ACTION, STATUS_ACTION],
                         help='the action that will be performed')

    optionals = parser.add_argument_group()
    optionals.add_argument("-v", "--version", action='version', version=version_text,
                           help="output version information and exit")
    optionals.add_argument("-h", "--help", action='help', help="display this help and exit")

    return parser.parse_args()


def get_client():
    try:
        return from_env()
    except DockerException as ex:
        print("Docker not available: " + str(ex))
        return None


def get_volume_name():
    return VOLUME_NAME


def get_volume():
    client = get_client()
    try:
        volume = client.volumes.get(get_volume_name())
    except NotFound:
        volume = None
    return volume


def create_volume():
    volume = get_volume()
    if volume is None:
        client = get_client()
        print("creating volume " + get_volume_name() + " ...")
        volume = client.volumes.create(name=get_volume_name(), driver="local", driver_opts={}, labels={})
    return volume


def get_image_name():
    registry_local = getenv(ENV_REGISTRY_LOCAL, "")
    image_name = IMAGE_NAME

    if registry_local.strip(" ") != "":
        image_name = registry_local.strip(" ") + '/' + image_name

    return image_name


def get_image():
    client = get_client()
    try:
        image = client.images.get(get_image_name())
    except ImageNotFound:
        image = None
    return image


def pull_image():
    image = get_image()
    if image is None:
        client = get_client()
        print("pulling image " + get_image_name() + " ...")
        image = client.images.pull(get_image_name())
    return image


def remove_image():
    image = get_image()
    if image is not None:
        client = get_client()
        client.images.remove(image=image.id, force=True, noprune=False)


def get_container_name():
    return CONTAINER_NAME


def get_container():
    client = get_client()
    try:
        container = client.containers.get(get_container_name())
    except NotFound:
        container = None
    return container


def remove_container():
    container = get_container()
    if container is not None:
        container.remove(v=True, link=False, force=True)


def start_container():
    container_name = get_container_name()
    image_name = get_image_name()
    client = get_client()

    if is_linux():
        network_mode = "host"
        ports = {}
    else:
        network_mode = "bridge"
        ports = {
            "8000/tcp": {"127.0.0.1", 8000},
            "9000/tcp": {"127.0.0.1", 9000}
        }

    mounts = [
        Mount("/etc/localtime", "/usr/share/zoneinfo/America/Sao_Paulo", "bind"),
        Mount("/var/run/docker.sock", "/var/run/docker.sock", "bind"),
        Mount("/data", get_volume_name(), "volume")
    ]

    container = client.containers.run(
        image=image_name,
        detach=True,
        hostname=container_name,
        mounts=mounts,
        name=container_name,
        network_mode=network_mode,
        ports=ports,
        restart_policy={"Name": "always"}
    )

    return container


def stop_container():
    container = get_container()
    if container is not None:
        container.stop()


def run_action(action):
    if get_client() is not None:

        container = get_container()

        if action == START_ACTION:
            pull_image()
            create_volume()
            remove_container()
            container = start_container()
            print(get_container_name() + " running: " + container.short_id)

        elif action == STOP_ACTION:
            if container is not None:
                stop_container()
                remove_container()
                remove_image()
                print(get_container_name() + " (" + container.short_id + ") stopped and removed")
            else:
                print(get_container_name() + " stopped")

        elif action == STATUS_ACTION:
            if container is not None and container.status == "running":
                print(get_container_name() + " is running: " + container.short_id)
            else:
                print(get_container_name() + " stopped")


# entrypoint inicial
if __name__ == '__main__':
    args = parse_arguments()
    run_action(args.action)
